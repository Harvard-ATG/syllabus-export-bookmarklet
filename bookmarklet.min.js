javascript: void(function(){function paginatedFetch(url,previousResponse=[]){return fetch(url).then(response=>response.json().then(json=>({values:json,link:response.headers.get("link")}))).then(responseWithLinks=>{let finalResponse=[...previousResponse,...responseWithLinks.values],parserExp,nextLinkMatch=/<([\w:\/=?&.]+?)>; rel="next"/.exec(responseWithLinks.link);return nextLinkMatch?paginatedFetch(nextLinkMatch[1],finalResponse):finalResponse})}class Event{constructor(title,description,start,end){this.title=title,this.description=description,this.start=start,this.end=end}get dateString(){let dateOptions={weekday:"short",year:"numeric",month:"short",day:"numeric"};return this.start?this.start.toLocaleDateString("en-US",dateOptions):""}get timeString(){let timeOptions={hour12:!0,hour:"2-digit",minute:"2-digit"};return this.start&this.end?`${this.start.toLocaleTimeString("en-US",timeOptions)} to ${this.end.toLocaleTimeString("en-US",timeOptions)}`:this.start?this.start.toLocaleTimeString("en-US",timeOptions):""}}const courseIdMatch=/courses\/(\d+)/,sisIdMatch=/courses\/(sis_course_id:\d+)/;let match=courseIdMatch.exec(window.location.pathname),sisMatch=sisIdMatch.exec(window.location.pathname);if(match){let courseId=match[1],includeDescription=window.confirm('Do you want to include descriptions for assignments and calendar events? (Choose "OK" for yes and "Cancel" for no)');const fetchCourse=fetch(`/api/v1/courses/${courseId}?include[]=syllabus_body`).then(res=>res.json()),fetchCalendar=paginatedFetch(`/api/v1/calendar_events?context_codes[]=course_${courseId}&all_events=true`).then(res=>{let events=[];return res.forEach(calendarEvent=>{let event=new Event(calendarEvent.title,includeDescription?calendarEvent.description:"",new Date(calendarEvent.start_at),new Date(calendarEvent.end_at));events.push(event)}),events}),fetchAssignments=paginatedFetch(`/api/v1/courses/${courseId}/assignments`).then(res=>{let events=[];return res.forEach(assignment=>{let event=new Event(assignment.name,includeDescription&&assignment.description?assignment.description:"",assignment.due_at?new Date(assignment.due_at):null,null);events.push(event)}),events}),fetchAssignmentGroups=paginatedFetch(`/api/v1/courses/${courseId}/assignment_groups`);Promise.all([fetchCourse,fetchCalendar,fetchAssignments,fetchAssignmentGroups]).then(([course,calendarEvents,assignmentEvents,assignmentGroups])=>{let events=[...calendarEvents,...assignmentEvents];events.sort((a,b)=>a.start-b.start);let content="<style>\n          table { border-spacing:0; }\n          th { background-color: #EEE; }\n          td { border: 1px solid; }\n        </style>";content+=`<h1>${course.name}</h1>${course.syllabus_body}<h2>Course Schedule</h2>`,content+="<table><tr><th>Date</th><th>Details</th></tr>",events.forEach(event=>{content+=`<tr><td>${event.dateString}</td>`,content+=`<td><strong>${event.title}</strong><br/>${event.description}</td>`,content+=`<td>${event.timeString}`}),content+="</table>",content+="<h2>Assignment Weights</h2>",content+="<table><tr><th>Assignment Group</th><th>Weight</th></tr>",assignmentGroups.forEach(group=>{content+=`<tr><td>${group.name}</td>`,content+=`<td>${group.group_weight} %</td></tr>`}),content+="</table>";let win=window.open("","Syllabus Export","width=600,height=400");win.document.body.innerHTML=content,win.print(),win.close()})}else if(sisMatch){alert("It looks like the URL for your Canvas page isn't quite what this tool requires. Your page should now reload with a URL that the tool can use. Once it loads back up, run this bookmark again to produce your syllabus.");const fetchCourse=fetch(`/api/v1/courses/${sisMatch[1]}`).then(res=>res.json()).then(res=>{window.location.href=`/courses/${res.id}`})}else alert("It doesn't look like you're on a Canvas page. Try running this bookmark from your Canvas course home page.")}());